quarkus.http.port=8080

#### Logging

quarkus.log.console.enable=true
quarkus.log.console.format=%d{HH:mm:ss} %-5p traceId=%X{traceId}, spanId=%X{spanId}, sampled=%X{sampled} [%c{2.}] (%t) %s%e%n
quarkus.log.console.level=DEBUG
quarkus.log.console.color=false
#quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}]] (%t) %s%e%n

#### Messaging

mp.messaging.outgoing.voting-prod.bootstrap.servers=my-cluster-kafka-bootstrap:9002
mp.messaging.outgoing.voting-prod.topic=voting
mp.messaging.outgoing.voting-prod.connector=smallrye-kafka
mp.messaging.outgoing.voting-prod.key.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.voting-prod.value.serializer=org.apache.kafka.common.serialization.StringSerializer
mp.messaging.outgoing.voting-prod.voting.acks=1

mp.messaging.incoming.voting.bootstrap.servers=my-cluster-kafka-bootstrap:9002
mp.messaging.incoming.voting.topic=voting
mp.messaging.incoming.voting.connector=smallrye-kafka
mp.messaging.incoming.voting.key.deserializer=org.apache.kafka.common.serialization.StringDeserializer
mp.messaging.incoming.voting.value.deserializer=org.apache.kafka.common.serialization.StringDeserializer

#### Datasource

quarkus.datasource.url: jdbc:postgresql://postgres:5032/voting
quarkus.datasource.driver: org.postgresql.Driver
quarkus.datasource.username: postgres
quarkus.datasource.password: postgres
# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

#### Infinispan

poll.cache.mode=DIST_ASYNC
poll.cache.entry.lifespan.hours=16
#poll.cache.eviction.cron="0 0 0 1/1 * ? *"

#### Messages

greeting.message=hello
greeting.name=voting app

#### Swagger / openapi

quarkus.swagger-ui.always-include=true

#### Open Tracing

quarkus.jaeger.service-name=votingservice
quarkus.jaeger.sampler-type=const
quarkus.jaeger.sampler-param=1

#### OpenShift
quarkus.openshift.expose=true
quarkus.kubernetes-client.trust-certs=true
quarkus.s2i.base-jvm-image=fabric8/s2i-java:3.0-java11




